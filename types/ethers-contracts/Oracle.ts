/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IOracle {
  export type TxHashInfoStruct = {
    didRevert: PromiseOrValue<boolean>;
    blockNumber: PromiseOrValue<BigNumberish>;
    coinbase: PromiseOrValue<string>;
  };

  export type TxHashInfoStructOutput = [boolean, BigNumber, string] & {
    didRevert: boolean;
    blockNumber: BigNumber;
    coinbase: string;
  };
}

export interface OracleInterface extends utils.Interface {
  functions: {
    "didSaveBlock(uint32)": FunctionFragment;
    "getTxInfo(bytes32)": FunctionFragment;
    "storeBlock(bytes32[],bool[],uint32,address)": FunctionFragment;
    "txInfos(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "didSaveBlock"
      | "getTxInfo"
      | "storeBlock"
      | "txInfos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "didSaveBlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTxInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "storeBlock",
    values: [
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "txInfos",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "didSaveBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTxInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "txInfos", data: BytesLike): Result;

  events: {
    "StoreBlock(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StoreBlock"): EventFragment;
}

export interface StoreBlockEventObject {
  blockNumber: BigNumber;
  coinbase: string;
}
export type StoreBlockEvent = TypedEvent<
  [BigNumber, string],
  StoreBlockEventObject
>;

export type StoreBlockEventFilter = TypedEventFilter<StoreBlockEvent>;

export interface Oracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    didSaveBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTxInfo(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IOracle.TxHashInfoStructOutput]>;

    storeBlock(
      txHashes: PromiseOrValue<BytesLike>[],
      didRevert: PromiseOrValue<boolean>[],
      blockNumber: PromiseOrValue<BigNumberish>,
      coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    txInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string] & {
        didRevert: boolean;
        blockNumber: BigNumber;
        coinbase: string;
      }
    >;
  };

  didSaveBlock(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTxInfo(
    txHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IOracle.TxHashInfoStructOutput>;

  storeBlock(
    txHashes: PromiseOrValue<BytesLike>[],
    didRevert: PromiseOrValue<boolean>[],
    blockNumber: PromiseOrValue<BigNumberish>,
    coinbase: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  txInfos(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, string] & {
      didRevert: boolean;
      blockNumber: BigNumber;
      coinbase: string;
    }
  >;

  callStatic: {
    didSaveBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTxInfo(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IOracle.TxHashInfoStructOutput>;

    storeBlock(
      txHashes: PromiseOrValue<BytesLike>[],
      didRevert: PromiseOrValue<boolean>[],
      blockNumber: PromiseOrValue<BigNumberish>,
      coinbase: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    txInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, string] & {
        didRevert: boolean;
        blockNumber: BigNumber;
        coinbase: string;
      }
    >;
  };

  filters: {
    "StoreBlock(uint256,address)"(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      coinbase?: PromiseOrValue<string> | null
    ): StoreBlockEventFilter;
    StoreBlock(
      blockNumber?: PromiseOrValue<BigNumberish> | null,
      coinbase?: PromiseOrValue<string> | null
    ): StoreBlockEventFilter;
  };

  estimateGas: {
    didSaveBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTxInfo(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    storeBlock(
      txHashes: PromiseOrValue<BytesLike>[],
      didRevert: PromiseOrValue<boolean>[],
      blockNumber: PromiseOrValue<BigNumberish>,
      coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    txInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    didSaveBlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTxInfo(
      txHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    storeBlock(
      txHashes: PromiseOrValue<BytesLike>[],
      didRevert: PromiseOrValue<boolean>[],
      blockNumber: PromiseOrValue<BigNumberish>,
      coinbase: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    txInfos(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
